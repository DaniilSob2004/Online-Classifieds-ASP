@model OnlineClassifieds.Models.Chat
@inject IUserRepository UserRepository
@inject CurrentUserProvider CurrentUserProvider

@{
    string currUserId = CurrentUserProvider.GetCurrentUserId() ?? String.Empty;
    string userName = "", avatarName = "";

    if (Model is not null)
    {
        // если текущий пользователь это покупатель в текущем чате
        userName = Model.IdBuyer!.Equals(currUserId) ?
            (Model.UserOwner.FullName ?? "User") :
            (Model.UserBuyer.FullName ?? "User");

        avatarName = Model.IdBuyer!.Equals(currUserId) ?
            UserRepository.GetAvatar(Model.UserOwner) :
            UserRepository.GetAvatar(Model.UserBuyer);
    }
}

<div class="chat-header clearfix">
    <div class="row">
        <div class="col-lg-6 user-info">
            <i data-toggle="modal" data-target="#view_info">
                <img src=@WC.ImageUserPath@avatarName alt="ava">
            </i>
            <div class="chat-about">
                <h6 class="m-b-0">@Model?.Announcement.Title</h6>
                <span>(@userName)</span>
            </div>
        </div>
    </div>
</div>
<div class="chat-history">
    <ul id="chatHistory" class="mb-0">
        @if (Model is not null)
        {
            @foreach (var mess in Model.Messages)
            {
                <partial name="ChatTemplate/_Message" model=@mess />  <!-- сообщение -->
            }
        }
    </ul>
</div>
<div class="chat-message clearfix">
    <div class="input-group mb-0">
        <div class="input-group-prepend">
            <span id="sendBtn" class="input-group-text sendBtn">
                <i class="fa fa-send"></i>
            </span>
        </div>
        <input id="message" type="text" class="form-control" placeholder="Enter text here...">                          
    </div>
</div>


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    $(document).ready(function() {
        settingsHeightListChat();  // регулируем высоту списка чатов

        // при клике на кнопку, отправляется AJAX-запрос, и возвращается PartialView сообщения
        $(".sendBtn").click(function() {
            const messageText = $("#message").val();
            const chatIdModel = "@Model?.Id";
            $.ajax({
                url: "/Message/SendMessage",
                type: "POST",
                data: { message: messageText, chatId: chatIdModel },
                success: (data) => {
                    $("#chatHistory").append(data);  // добавляем сообщение в чат пользователя
                    $("#message").val("");  // очищаем текстовое поле для ввода

                    sendMessageToChat(chatIdModel, messageText);  // отправка сообщения на hub
                    settingsHeightListChat();  // регулируем высоту списка чатов
                },
                error: (error) => {
                    console.error(error);
                }
            });
        });

        // отправка сообщение на сервер, для отправки пользователю
        function sendMessageToChat(chatId, message) {
            const senderUserId = @Html.Raw(Json.Serialize(currUserId.ToString()));
            window.chatConnection.invoke("SendMessage", chatId, senderUserId, message)
                .then(() => {
                    console.log("Message sent successfully!");
                })
                .catch((err) => {
                    console.error("Error sending message: " + err.message);
                });
        }
    });
</script>
